import numpy as np
import matplotlib.pyplot as plt

# Parámetros
g = 9.81
g_hat = 6 * g  # Límite de aceleración
r = 40  # Ejemplo de radio (cambiar según tramo)

# Definición del sistema de EDOs
def curva_edo(t, y):
    theta, omega = y  # theta = ángulo, omega = velocidad angular
    dtheta_dt = omega
    domega_dt = - (g_hat / r) * np.sin(theta)
    return np.array([dtheta_dt, domega_dt])

# Método RK4
def runge_kutta_4(f, y0, t):
    n = len(t)
    y = np.zeros((n, len(y0)))
    y[0] = y0
    for i in range(n-1):
        dt = t[i+1] - t[i]
        k1 = f(t[i], y[i])
        k2 = f(t[i] + dt/2, y[i] + dt/2 * k1)
        k3 = f(t[i] + dt/2, y[i] + dt/2 * k2)
        k4 = f(t[i] + dt, y[i] + dt * k3)
        y[i+1] = y[i] + dt/6 * (k1 + 2*k2 + 2*k3 + k4)
    return y

# Condiciones iniciales
theta0 = 0  # ángulo inicial en radianes
omega0 = 0  # velocidad angular inicial
y0 = [theta0, omega0]

# Tiempo de simulación
t = np.linspace(0, 2, 1000)  # 2 segundos, 1000 pasos

# Simulación
resultado = runge_kutta_4(curva_edo, y0, t)
theta = resultado[:, 0]
omega = resultado[:, 1]

# Aceleración angular
alpha = - (g_hat / r) * np.sin(theta)

# Gráficos
plt.figure(figsize=(10, 6))
plt.subplot(3,1,1)
plt.plot(t, theta)
plt.ylabel('θ (rad)')

plt.subplot(3,1,2)
plt.plot(t, omega)
plt.ylabel('ω (rad/s)')

plt.subplot(3,1,3)
plt.plot(t, alpha)
plt.axhline(y=g_hat/r, color='r', linestyle='--')
plt.axhline(y=-g_hat/r, color='r', linestyle='--')
plt.ylabel('α (rad/s²)')
plt.xlabel('Tiempo (s)')

plt.tight_layout()
plt.show()
